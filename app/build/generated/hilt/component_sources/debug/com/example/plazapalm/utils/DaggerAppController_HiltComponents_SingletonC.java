// Generated by Dagger (https://dagger.dev).
package com.example.plazapalm.utils;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.plazapalm.MainActivity;
import com.example.plazapalm.datastore.DataStoreModule;
import com.example.plazapalm.datastore.DataStoreModule_GetDataStoreFactory;
import com.example.plazapalm.datastore.DataStoreUtil;
import com.example.plazapalm.networkcalls.NetworkModule;
import com.example.plazapalm.networkcalls.NetworkModule_CacheUtilFactory;
import com.example.plazapalm.networkcalls.NetworkModule_ExceptionHandlerFactory;
import com.example.plazapalm.networkcalls.NetworkModule_GsonConverterFactoryFactory;
import com.example.plazapalm.networkcalls.NetworkModule_ProvideApiServiceFactory;
import com.example.plazapalm.networkcalls.NetworkModule_ProvideBaseUrlFactory;
import com.example.plazapalm.networkcalls.NetworkModule_ProvideOkHttpClientFactory;
import com.example.plazapalm.networkcalls.NetworkModule_ProvideRetrofitFactory;
import com.example.plazapalm.networkcalls.NetworkModule_TokenAuthenticatorFactory;
import com.example.plazapalm.networkcalls.Repository;
import com.example.plazapalm.networkcalls.RetrofitApi;
import com.example.plazapalm.pref.PrefModule;
import com.example.plazapalm.pref.PrefModule_GetEditorFactory;
import com.example.plazapalm.pref.PrefModule_GetPrefFactory;
import com.example.plazapalm.pref.PreferenceFile;
import com.example.plazapalm.premiumviews.PremiumEditProVM;
import com.example.plazapalm.premiumviews.PremiumEditProVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.premiumviews.PremiumEditProfileFragment;
import com.example.plazapalm.premiumviews.qrcodegenerate.QRCodeGenerateFragment;
import com.example.plazapalm.premiumviews.qrcodegenerate.QRCodeGenerateVM;
import com.example.plazapalm.premiumviews.qrcodegenerate.QRCodeGenerateVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.MainVM;
import com.example.plazapalm.views.MainVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.addphotos.AddPhotosFragment;
import com.example.plazapalm.views.addphotos.AddPhotosFragment_MembersInjector;
import com.example.plazapalm.views.addphotos.AddPhotosVM;
import com.example.plazapalm.views.addphotos.AddPhotosVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.AdvanceSettingFragment;
import com.example.plazapalm.views.advancesettings.AdvanceSettingVM;
import com.example.plazapalm.views.advancesettings.AdvanceSettingVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.editfontpage.EditFrontPageFragment;
import com.example.plazapalm.views.advancesettings.editfontpage.EditFrontPageVM;
import com.example.plazapalm.views.advancesettings.editfontpage.EditFrontPageVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.editfontpage.FontsListFragment;
import com.example.plazapalm.views.advancesettings.editlook.AdvanceEditLookFragment;
import com.example.plazapalm.views.advancesettings.editlook.AdvanceEditLookFragment_MembersInjector;
import com.example.plazapalm.views.advancesettings.editlook.AdvanceEditLookVM;
import com.example.plazapalm.views.advancesettings.editlook.AdvanceEditLookVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.editmap.AdvanceSettingMapFragment;
import com.example.plazapalm.views.advancesettings.editmap.AdvanceSettingMapVM;
import com.example.plazapalm.views.advancesettings.editmap.AdvanceSettingMapVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.gallery.AdvanceSettGalleryFragment;
import com.example.plazapalm.views.advancesettings.gallery.AdvanceSettingGalleryVM;
import com.example.plazapalm.views.advancesettings.gallery.AdvanceSettingGalleryVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.map.AdvanceMapFragment;
import com.example.plazapalm.views.advancesettings.map.AdvanceMapFragment_MembersInjector;
import com.example.plazapalm.views.advancesettings.map.AdvanceMapVM;
import com.example.plazapalm.views.advancesettings.map.AdvanceMapVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.pictures.PicturesFragment;
import com.example.plazapalm.views.advancesettings.pictures.PicturesVM;
import com.example.plazapalm.views.advancesettings.pictures.PicturesVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.pictures.ShowPictureVideoFragment;
import com.example.plazapalm.views.advancesettings.pictures.ShowPictureVideoVM;
import com.example.plazapalm.views.advancesettings.pictures.ShowPictureVideoVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.advancesettings.questionaries.QuestionariesFragment;
import com.example.plazapalm.views.advancesettings.questionaries.QuestionariesFragment_MembersInjector;
import com.example.plazapalm.views.advancesettings.questionaries.QuestionariesVM;
import com.example.plazapalm.views.advancesettings.questionaries.QuestionariesVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.bookingdetails.BookingDetailsFragment;
import com.example.plazapalm.views.bookingdetails.BookingDetailsVM;
import com.example.plazapalm.views.bookingdetails.BookingDetailsVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.catergorylist.CategoriesListFragment;
import com.example.plazapalm.views.catergorylist.CategoriesListFragment_MembersInjector;
import com.example.plazapalm.views.catergorylist.CategoriesListVM;
import com.example.plazapalm.views.catergorylist.CategoriesListVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.catergorylist.addcities.AddCitiesFragment;
import com.example.plazapalm.views.catergorylist.addcities.AddCitiesFragment_MembersInjector;
import com.example.plazapalm.views.catergorylist.addcities.AddCitiesVM;
import com.example.plazapalm.views.catergorylist.addcities.AddCitiesVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.changepass.ChangePassVM;
import com.example.plazapalm.views.changepass.ChangePassVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.changepass.ChangePasswordFragment;
import com.example.plazapalm.views.chat.ChatFragment;
import com.example.plazapalm.views.chat.ChatVM;
import com.example.plazapalm.views.chat.ChatVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.confirmbookthankyou.ConfirmBookingFragment;
import com.example.plazapalm.views.confirmbookthankyou.ConfirmBookingVM;
import com.example.plazapalm.views.confirmbookthankyou.ConfirmBookingVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.confirmbookthankyou.ThankYouFragment;
import com.example.plazapalm.views.confirmbookthankyou.ThankYouVM;
import com.example.plazapalm.views.confirmbookthankyou.ThankYouVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.contactus.ContactUsFragment;
import com.example.plazapalm.views.contactus.ContactUsVM;
import com.example.plazapalm.views.contactus.ContactUsVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.dashboard.DashBoardFragment;
import com.example.plazapalm.views.dashboard.DashBoardFragment_MembersInjector;
import com.example.plazapalm.views.dashboard.DashBoardVM;
import com.example.plazapalm.views.dashboard.DashBoardVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.editprofile.EditProfileFragment;
import com.example.plazapalm.views.editprofile.EditProfileFragment_MembersInjector;
import com.example.plazapalm.views.editprofile.EditProfileVM;
import com.example.plazapalm.views.editprofile.EditProfileVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.favourites.FavouritesFragment;
import com.example.plazapalm.views.favourites.FavouritesVM;
import com.example.plazapalm.views.favourites.FavouritesVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.favourites.favdetails.FavDetailsFragment;
import com.example.plazapalm.views.favourites.favdetails.FavDetailsFragment_MembersInjector;
import com.example.plazapalm.views.favourites.favdetails.FavDetailsVM;
import com.example.plazapalm.views.favourites.favdetails.FavDetailsVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.filter.FilterFragment;
import com.example.plazapalm.views.filter.FilterFragmentVM;
import com.example.plazapalm.views.filter.FilterFragmentVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.filter.FilterFragment_MembersInjector;
import com.example.plazapalm.views.forgotpassword.ForgotPassVM;
import com.example.plazapalm.views.forgotpassword.ForgotPassVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.forgotpassword.ForgotPasswordFragment;
import com.example.plazapalm.views.login.LoginFragment;
import com.example.plazapalm.views.login.LoginVM;
import com.example.plazapalm.views.login.LoginVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.messageslist.MessagesFragment;
import com.example.plazapalm.views.messageslist.MessagesVM;
import com.example.plazapalm.views.messageslist.MessagesVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.myprofile.MyProfileFragment;
import com.example.plazapalm.views.myprofile.MyProfileFragment_MembersInjector;
import com.example.plazapalm.views.myprofile.MyProfileVM;
import com.example.plazapalm.views.myprofile.MyProfileVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.myprofile.calendar.CalendarFragment;
import com.example.plazapalm.views.myprofile.calendar.CalendarVM;
import com.example.plazapalm.views.myprofile.calendar.CalendarVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.myprofile.postprofile.PostProfileFragment;
import com.example.plazapalm.views.myprofile.postprofile.PostProfileFragment_MembersInjector;
import com.example.plazapalm.views.myprofile.postprofile.PostProfileVM;
import com.example.plazapalm.views.myprofile.postprofile.PostProfileVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.myprofile.qrcodescanner.QrCodeScannerFragment;
import com.example.plazapalm.views.myprofile.qrcodescanner.QrCodeScannerVM;
import com.example.plazapalm.views.myprofile.qrcodescanner.QrCodeScannerVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.privacypolicy.PrivacyPolicyFragment;
import com.example.plazapalm.views.privacypolicy.PrivacyPolicyVM;
import com.example.plazapalm.views.privacypolicy.PrivacyPolicyVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.report.ReportFragment;
import com.example.plazapalm.views.report.ReportVM;
import com.example.plazapalm.views.report.ReportVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.reportselection.ReportChooseOptionFragment;
import com.example.plazapalm.views.reportselection.ReportChooseVM;
import com.example.plazapalm.views.reportselection.ReportChooseVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.selectcategory.SelectCategoryFragment;
import com.example.plazapalm.views.selectcategory.SelectCategoryViewModel;
import com.example.plazapalm.views.selectcategory.SelectCategoryViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.selectcategory.opencategeroy.OpenCategeroyFragment;
import com.example.plazapalm.views.selectcategory.opencategeroy.OpenCategeroyFragment_MembersInjector;
import com.example.plazapalm.views.selectcategory.opencategeroy.OpenCategeroyViewModel;
import com.example.plazapalm.views.selectcategory.opencategeroy.OpenCategeroyViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.settings.SettingsFragment;
import com.example.plazapalm.views.settings.SettingsVM;
import com.example.plazapalm.views.settings.SettingsVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.signup.SignUpFragment;
import com.example.plazapalm.views.signup.SignupVM;
import com.example.plazapalm.views.signup.SignupVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.splash.SplashFragment;
import com.example.plazapalm.views.splash.SplashFragment_MembersInjector;
import com.example.plazapalm.views.splash.SplashVM;
import com.example.plazapalm.views.splash.SplashVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.termsuse.TermsUseFragment;
import com.example.plazapalm.views.termsuse.TermsUseVM;
import com.example.plazapalm.views.termsuse.TermsUseVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.updatemail.UpdateEmailFragment;
import com.example.plazapalm.views.updatemail.UpdateEmailVM;
import com.example.plazapalm.views.updatemail.UpdateEmailVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.upgrade.UpgradeProFragment;
import com.example.plazapalm.views.upgrade.UpgradeVM;
import com.example.plazapalm.views.upgrade.UpgradeVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.verifyemailsecond.EmailVerifyFragment;
import com.example.plazapalm.views.verifyemailsecond.EmailVerifyFragment_MembersInjector;
import com.example.plazapalm.views.verifyemailsecond.EmailVerifyVM;
import com.example.plazapalm.views.verifyemailsecond.EmailVerifyVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.verifymail.VerifyEmailFragment;
import com.example.plazapalm.views.verifymail.VerifyEmailVM;
import com.example.plazapalm.views.verifymail.VerifyEmailVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.viewprofile.ViewProfileFragment;
import com.example.plazapalm.views.viewprofile.ViewProfileVM;
import com.example.plazapalm.views.viewprofile.ViewProfileVM_HiltModules_KeyModule_ProvideFactory;
import com.example.plazapalm.views.welcome.WelcomeFragment;
import com.example.plazapalm.views.welcome.WelcomeVM;
import com.example.plazapalm.views.welcome.WelcomeVM_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineExceptionHandler;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppController_HiltComponents_SingletonC {
  private DaggerAppController_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private DataStoreModule dataStoreModule;

    private NetworkModule networkModule;

    private PrefModule prefModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder dataStoreModule(DataStoreModule dataStoreModule) {
      this.dataStoreModule = Preconditions.checkNotNull(dataStoreModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder prefModule(PrefModule prefModule) {
      this.prefModule = Preconditions.checkNotNull(prefModule);
      return this;
    }

    public AppController_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (dataStoreModule == null) {
        this.dataStoreModule = new DataStoreModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (prefModule == null) {
        this.prefModule = new PrefModule();
      }
      return new SingletonCImpl(applicationContextModule, dataStoreModule, networkModule, prefModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements AppController_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public AppController_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements AppController_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public AppController_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements AppController_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public AppController_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements AppController_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public AppController_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements AppController_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public AppController_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements AppController_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public AppController_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements AppController_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public AppController_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends AppController_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends AppController_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    private PreferenceFile preferenceFile() {
      return new PreferenceFile(singletonCImpl.getEditorProvider.get(), singletonCImpl.getPrefProvider.get(), singletonCImpl.getEditorProvider.get(), singletonCImpl.getPrefProvider.get());
    }

    private Repository repository() {
      return new Repository(singletonCImpl.provideApiServiceProvider.get(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), singletonCImpl.dataStoreUtil());
    }

    @Override
    public void injectPremiumEditProfileFragment(PremiumEditProfileFragment arg0) {
    }

    @Override
    public void injectQRCodeGenerateFragment(QRCodeGenerateFragment arg0) {
    }

    @Override
    public void injectAddPhotosFragment(AddPhotosFragment arg0) {
      injectAddPhotosFragment2(arg0);
    }

    @Override
    public void injectAdvanceSettingFragment(AdvanceSettingFragment arg0) {
    }

    @Override
    public void injectEditFrontPageFragment(EditFrontPageFragment arg0) {
    }

    @Override
    public void injectFontsListFragment(FontsListFragment arg0) {
    }

    @Override
    public void injectAdvanceEditLookFragment(AdvanceEditLookFragment arg0) {
      injectAdvanceEditLookFragment2(arg0);
    }

    @Override
    public void injectAdvanceSettingMapFragment(AdvanceSettingMapFragment arg0) {
    }

    @Override
    public void injectAdvanceSettGalleryFragment(AdvanceSettGalleryFragment arg0) {
    }

    @Override
    public void injectAdvanceMapFragment(AdvanceMapFragment arg0) {
      injectAdvanceMapFragment2(arg0);
    }

    @Override
    public void injectPicturesFragment(PicturesFragment arg0) {
    }

    @Override
    public void injectShowPictureVideoFragment(ShowPictureVideoFragment arg0) {
    }

    @Override
    public void injectQuestionariesFragment(QuestionariesFragment arg0) {
      injectQuestionariesFragment2(arg0);
    }

    @Override
    public void injectBookingDetailsFragment(BookingDetailsFragment arg0) {
    }

    @Override
    public void injectCategoriesListFragment(CategoriesListFragment arg0) {
      injectCategoriesListFragment2(arg0);
    }

    @Override
    public void injectAddCitiesFragment(AddCitiesFragment arg0) {
      injectAddCitiesFragment2(arg0);
    }

    @Override
    public void injectChangePasswordFragment(ChangePasswordFragment arg0) {
    }

    @Override
    public void injectChatFragment(ChatFragment arg0) {
    }

    @Override
    public void injectConfirmBookingFragment(ConfirmBookingFragment arg0) {
    }

    @Override
    public void injectThankYouFragment(ThankYouFragment arg0) {
    }

    @Override
    public void injectContactUsFragment(ContactUsFragment arg0) {
    }

    @Override
    public void injectDashBoardFragment(DashBoardFragment arg0) {
      injectDashBoardFragment2(arg0);
    }

    @Override
    public void injectEditProfileFragment(EditProfileFragment arg0) {
      injectEditProfileFragment2(arg0);
    }

    @Override
    public void injectFavouritesFragment(FavouritesFragment arg0) {
    }

    @Override
    public void injectFavDetailsFragment(FavDetailsFragment arg0) {
      injectFavDetailsFragment2(arg0);
    }

    @Override
    public void injectFilterFragment(FilterFragment arg0) {
      injectFilterFragment2(arg0);
    }

    @Override
    public void injectForgotPasswordFragment(ForgotPasswordFragment arg0) {
    }

    @Override
    public void injectLoginFragment(LoginFragment arg0) {
    }

    @Override
    public void injectMessagesFragment(MessagesFragment arg0) {
    }

    @Override
    public void injectMyProfileFragment(MyProfileFragment arg0) {
      injectMyProfileFragment2(arg0);
    }

    @Override
    public void injectCalendarFragment(CalendarFragment arg0) {
    }

    @Override
    public void injectPostProfileFragment(PostProfileFragment arg0) {
      injectPostProfileFragment2(arg0);
    }

    @Override
    public void injectQrCodeScannerFragment(QrCodeScannerFragment arg0) {
    }

    @Override
    public void injectPrivacyPolicyFragment(PrivacyPolicyFragment arg0) {
    }

    @Override
    public void injectReportFragment(ReportFragment arg0) {
    }

    @Override
    public void injectReportChooseOptionFragment(ReportChooseOptionFragment arg0) {
    }

    @Override
    public void injectSelectCategoryFragment(SelectCategoryFragment arg0) {
    }

    @Override
    public void injectOpenCategeroyFragment(OpenCategeroyFragment arg0) {
      injectOpenCategeroyFragment2(arg0);
    }

    @Override
    public void injectSettingsFragment(SettingsFragment arg0) {
    }

    @Override
    public void injectSignUpFragment(SignUpFragment arg0) {
    }

    @Override
    public void injectSplashFragment(SplashFragment arg0) {
      injectSplashFragment2(arg0);
    }

    @Override
    public void injectTermsUseFragment(TermsUseFragment arg0) {
    }

    @Override
    public void injectUpdateEmailFragment(UpdateEmailFragment arg0) {
    }

    @Override
    public void injectUpgradeProFragment(UpgradeProFragment arg0) {
    }

    @Override
    public void injectEmailVerifyFragment(EmailVerifyFragment arg0) {
      injectEmailVerifyFragment2(arg0);
    }

    @Override
    public void injectVerifyEmailFragment(VerifyEmailFragment arg0) {
    }

    @Override
    public void injectViewProfileFragment(ViewProfileFragment arg0) {
    }

    @Override
    public void injectWelcomeFragment(WelcomeFragment arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private AddPhotosFragment injectAddPhotosFragment2(AddPhotosFragment instance) {
      AddPhotosFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      AddPhotosFragment_MembersInjector.injectPref(instance, preferenceFile());
      AddPhotosFragment_MembersInjector.injectRepository(instance, repository());
      return instance;
    }

    private AdvanceEditLookFragment injectAdvanceEditLookFragment2(
        AdvanceEditLookFragment instance) {
      AdvanceEditLookFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      AdvanceEditLookFragment_MembersInjector.injectPreferenceFile(instance, preferenceFile());
      return instance;
    }

    private AdvanceMapFragment injectAdvanceMapFragment2(AdvanceMapFragment instance) {
      AdvanceMapFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private QuestionariesFragment injectQuestionariesFragment2(QuestionariesFragment instance) {
      QuestionariesFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      QuestionariesFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private CategoriesListFragment injectCategoriesListFragment2(CategoriesListFragment instance) {
      CategoriesListFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      CategoriesListFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private AddCitiesFragment injectAddCitiesFragment2(AddCitiesFragment instance) {
      AddCitiesFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private DashBoardFragment injectDashBoardFragment2(DashBoardFragment instance) {
      DashBoardFragment_MembersInjector.injectDataStore(instance, singletonCImpl.dataStoreUtil());
      DashBoardFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private EditProfileFragment injectEditProfileFragment2(EditProfileFragment instance) {
      EditProfileFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      return instance;
    }

    private FavDetailsFragment injectFavDetailsFragment2(FavDetailsFragment instance) {
      FavDetailsFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      FavDetailsFragment_MembersInjector.injectRepository(instance, repository());
      FavDetailsFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private FilterFragment injectFilterFragment2(FilterFragment instance) {
      FilterFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      FilterFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private MyProfileFragment injectMyProfileFragment2(MyProfileFragment instance) {
      MyProfileFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      MyProfileFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private PostProfileFragment injectPostProfileFragment2(PostProfileFragment instance) {
      PostProfileFragment_MembersInjector.injectPref(instance, preferenceFile());
      PostProfileFragment_MembersInjector.injectRepository(instance, repository());
      return instance;
    }

    private OpenCategeroyFragment injectOpenCategeroyFragment2(OpenCategeroyFragment instance) {
      OpenCategeroyFragment_MembersInjector.injectPref(instance, preferenceFile());
      return instance;
    }

    private SplashFragment injectSplashFragment2(SplashFragment instance) {
      SplashFragment_MembersInjector.injectDataStoreUtil(instance, singletonCImpl.dataStoreUtil());
      return instance;
    }

    private EmailVerifyFragment injectEmailVerifyFragment2(EmailVerifyFragment instance) {
      EmailVerifyFragment_MembersInjector.injectRepository(instance, repository());
      return instance;
    }
  }

  private static final class ViewCImpl extends AppController_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends AppController_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(48).add(AddCitiesVM_HiltModules_KeyModule_ProvideFactory.provide()).add(AddPhotosVM_HiltModules_KeyModule_ProvideFactory.provide()).add(AdvanceEditLookVM_HiltModules_KeyModule_ProvideFactory.provide()).add(AdvanceMapVM_HiltModules_KeyModule_ProvideFactory.provide()).add(AdvanceSettingGalleryVM_HiltModules_KeyModule_ProvideFactory.provide()).add(AdvanceSettingMapVM_HiltModules_KeyModule_ProvideFactory.provide()).add(AdvanceSettingVM_HiltModules_KeyModule_ProvideFactory.provide()).add(BookingDetailsVM_HiltModules_KeyModule_ProvideFactory.provide()).add(CalendarVM_HiltModules_KeyModule_ProvideFactory.provide()).add(CategoriesListVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ChangePassVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ChatVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ConfirmBookingVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ContactUsVM_HiltModules_KeyModule_ProvideFactory.provide()).add(DashBoardVM_HiltModules_KeyModule_ProvideFactory.provide()).add(EditFrontPageVM_HiltModules_KeyModule_ProvideFactory.provide()).add(EditProfileVM_HiltModules_KeyModule_ProvideFactory.provide()).add(EmailVerifyVM_HiltModules_KeyModule_ProvideFactory.provide()).add(FavDetailsVM_HiltModules_KeyModule_ProvideFactory.provide()).add(FavouritesVM_HiltModules_KeyModule_ProvideFactory.provide()).add(FilterFragmentVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ForgotPassVM_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginVM_HiltModules_KeyModule_ProvideFactory.provide()).add(MainVM_HiltModules_KeyModule_ProvideFactory.provide()).add(MessagesVM_HiltModules_KeyModule_ProvideFactory.provide()).add(MyProfileVM_HiltModules_KeyModule_ProvideFactory.provide()).add(OpenCategeroyViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PicturesVM_HiltModules_KeyModule_ProvideFactory.provide()).add(PostProfileVM_HiltModules_KeyModule_ProvideFactory.provide()).add(PremiumEditProVM_HiltModules_KeyModule_ProvideFactory.provide()).add(PrivacyPolicyVM_HiltModules_KeyModule_ProvideFactory.provide()).add(QRCodeGenerateVM_HiltModules_KeyModule_ProvideFactory.provide()).add(QrCodeScannerVM_HiltModules_KeyModule_ProvideFactory.provide()).add(QuestionariesVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ReportChooseVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ReportVM_HiltModules_KeyModule_ProvideFactory.provide()).add(SelectCategoryViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SettingsVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ShowPictureVideoVM_HiltModules_KeyModule_ProvideFactory.provide()).add(SignupVM_HiltModules_KeyModule_ProvideFactory.provide()).add(SplashVM_HiltModules_KeyModule_ProvideFactory.provide()).add(TermsUseVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ThankYouVM_HiltModules_KeyModule_ProvideFactory.provide()).add(UpdateEmailVM_HiltModules_KeyModule_ProvideFactory.provide()).add(UpgradeVM_HiltModules_KeyModule_ProvideFactory.provide()).add(VerifyEmailVM_HiltModules_KeyModule_ProvideFactory.provide()).add(ViewProfileVM_HiltModules_KeyModule_ProvideFactory.provide()).add(WelcomeVM_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends AppController_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AddCitiesVM> addCitiesVMProvider;

    private Provider<AddPhotosVM> addPhotosVMProvider;

    private Provider<AdvanceEditLookVM> advanceEditLookVMProvider;

    private Provider<AdvanceMapVM> advanceMapVMProvider;

    private Provider<AdvanceSettingGalleryVM> advanceSettingGalleryVMProvider;

    private Provider<AdvanceSettingMapVM> advanceSettingMapVMProvider;

    private Provider<AdvanceSettingVM> advanceSettingVMProvider;

    private Provider<BookingDetailsVM> bookingDetailsVMProvider;

    private Provider<CalendarVM> calendarVMProvider;

    private Provider<CategoriesListVM> categoriesListVMProvider;

    private Provider<ChangePassVM> changePassVMProvider;

    private Provider<ChatVM> chatVMProvider;

    private Provider<ConfirmBookingVM> confirmBookingVMProvider;

    private Provider<ContactUsVM> contactUsVMProvider;

    private Provider<DashBoardVM> dashBoardVMProvider;

    private Provider<EditFrontPageVM> editFrontPageVMProvider;

    private Provider<EditProfileVM> editProfileVMProvider;

    private Provider<EmailVerifyVM> emailVerifyVMProvider;

    private Provider<FavDetailsVM> favDetailsVMProvider;

    private Provider<FavouritesVM> favouritesVMProvider;

    private Provider<FilterFragmentVM> filterFragmentVMProvider;

    private Provider<ForgotPassVM> forgotPassVMProvider;

    private Provider<LoginVM> loginVMProvider;

    private Provider<MainVM> mainVMProvider;

    private Provider<MessagesVM> messagesVMProvider;

    private Provider<MyProfileVM> myProfileVMProvider;

    private Provider<OpenCategeroyViewModel> openCategeroyViewModelProvider;

    private Provider<PicturesVM> picturesVMProvider;

    private Provider<PostProfileVM> postProfileVMProvider;

    private Provider<PremiumEditProVM> premiumEditProVMProvider;

    private Provider<PrivacyPolicyVM> privacyPolicyVMProvider;

    private Provider<QRCodeGenerateVM> qRCodeGenerateVMProvider;

    private Provider<QrCodeScannerVM> qrCodeScannerVMProvider;

    private Provider<QuestionariesVM> questionariesVMProvider;

    private Provider<ReportChooseVM> reportChooseVMProvider;

    private Provider<ReportVM> reportVMProvider;

    private Provider<SelectCategoryViewModel> selectCategoryViewModelProvider;

    private Provider<SettingsVM> settingsVMProvider;

    private Provider<ShowPictureVideoVM> showPictureVideoVMProvider;

    private Provider<SignupVM> signupVMProvider;

    private Provider<SplashVM> splashVMProvider;

    private Provider<TermsUseVM> termsUseVMProvider;

    private Provider<ThankYouVM> thankYouVMProvider;

    private Provider<UpdateEmailVM> updateEmailVMProvider;

    private Provider<UpgradeVM> upgradeVMProvider;

    private Provider<VerifyEmailVM> verifyEmailVMProvider;

    private Provider<ViewProfileVM> viewProfileVMProvider;

    private Provider<WelcomeVM> welcomeVMProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private PreferenceFile preferenceFile() {
      return new PreferenceFile(singletonCImpl.getEditorProvider.get(), singletonCImpl.getPrefProvider.get(), singletonCImpl.getEditorProvider.get(), singletonCImpl.getPrefProvider.get());
    }

    private Repository repository() {
      return new Repository(singletonCImpl.provideApiServiceProvider.get(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), singletonCImpl.dataStoreUtil());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.addCitiesVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.addPhotosVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.advanceEditLookVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.advanceMapVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.advanceSettingGalleryVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.advanceSettingMapVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.advanceSettingVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.bookingDetailsVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.calendarVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.categoriesListVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.changePassVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
      this.chatVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11);
      this.confirmBookingVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 12);
      this.contactUsVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 13);
      this.dashBoardVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 14);
      this.editFrontPageVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 15);
      this.editProfileVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 16);
      this.emailVerifyVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 17);
      this.favDetailsVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 18);
      this.favouritesVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 19);
      this.filterFragmentVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 20);
      this.forgotPassVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 21);
      this.loginVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 22);
      this.mainVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 23);
      this.messagesVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 24);
      this.myProfileVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 25);
      this.openCategeroyViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 26);
      this.picturesVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 27);
      this.postProfileVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 28);
      this.premiumEditProVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 29);
      this.privacyPolicyVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 30);
      this.qRCodeGenerateVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 31);
      this.qrCodeScannerVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 32);
      this.questionariesVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 33);
      this.reportChooseVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 34);
      this.reportVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 35);
      this.selectCategoryViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 36);
      this.settingsVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 37);
      this.showPictureVideoVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 38);
      this.signupVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 39);
      this.splashVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 40);
      this.termsUseVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 41);
      this.thankYouVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 42);
      this.updateEmailVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 43);
      this.upgradeVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 44);
      this.verifyEmailVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 45);
      this.viewProfileVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 46);
      this.welcomeVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 47);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(48).put("com.example.plazapalm.views.catergorylist.addcities.AddCitiesVM", ((Provider) addCitiesVMProvider)).put("com.example.plazapalm.views.addphotos.AddPhotosVM", ((Provider) addPhotosVMProvider)).put("com.example.plazapalm.views.advancesettings.editlook.AdvanceEditLookVM", ((Provider) advanceEditLookVMProvider)).put("com.example.plazapalm.views.advancesettings.map.AdvanceMapVM", ((Provider) advanceMapVMProvider)).put("com.example.plazapalm.views.advancesettings.gallery.AdvanceSettingGalleryVM", ((Provider) advanceSettingGalleryVMProvider)).put("com.example.plazapalm.views.advancesettings.editmap.AdvanceSettingMapVM", ((Provider) advanceSettingMapVMProvider)).put("com.example.plazapalm.views.advancesettings.AdvanceSettingVM", ((Provider) advanceSettingVMProvider)).put("com.example.plazapalm.views.bookingdetails.BookingDetailsVM", ((Provider) bookingDetailsVMProvider)).put("com.example.plazapalm.views.myprofile.calendar.CalendarVM", ((Provider) calendarVMProvider)).put("com.example.plazapalm.views.catergorylist.CategoriesListVM", ((Provider) categoriesListVMProvider)).put("com.example.plazapalm.views.changepass.ChangePassVM", ((Provider) changePassVMProvider)).put("com.example.plazapalm.views.chat.ChatVM", ((Provider) chatVMProvider)).put("com.example.plazapalm.views.confirmbookthankyou.ConfirmBookingVM", ((Provider) confirmBookingVMProvider)).put("com.example.plazapalm.views.contactus.ContactUsVM", ((Provider) contactUsVMProvider)).put("com.example.plazapalm.views.dashboard.DashBoardVM", ((Provider) dashBoardVMProvider)).put("com.example.plazapalm.views.advancesettings.editfontpage.EditFrontPageVM", ((Provider) editFrontPageVMProvider)).put("com.example.plazapalm.views.editprofile.EditProfileVM", ((Provider) editProfileVMProvider)).put("com.example.plazapalm.views.verifyemailsecond.EmailVerifyVM", ((Provider) emailVerifyVMProvider)).put("com.example.plazapalm.views.favourites.favdetails.FavDetailsVM", ((Provider) favDetailsVMProvider)).put("com.example.plazapalm.views.favourites.FavouritesVM", ((Provider) favouritesVMProvider)).put("com.example.plazapalm.views.filter.FilterFragmentVM", ((Provider) filterFragmentVMProvider)).put("com.example.plazapalm.views.forgotpassword.ForgotPassVM", ((Provider) forgotPassVMProvider)).put("com.example.plazapalm.views.login.LoginVM", ((Provider) loginVMProvider)).put("com.example.plazapalm.views.MainVM", ((Provider) mainVMProvider)).put("com.example.plazapalm.views.messageslist.MessagesVM", ((Provider) messagesVMProvider)).put("com.example.plazapalm.views.myprofile.MyProfileVM", ((Provider) myProfileVMProvider)).put("com.example.plazapalm.views.selectcategory.opencategeroy.OpenCategeroyViewModel", ((Provider) openCategeroyViewModelProvider)).put("com.example.plazapalm.views.advancesettings.pictures.PicturesVM", ((Provider) picturesVMProvider)).put("com.example.plazapalm.views.myprofile.postprofile.PostProfileVM", ((Provider) postProfileVMProvider)).put("com.example.plazapalm.premiumviews.PremiumEditProVM", ((Provider) premiumEditProVMProvider)).put("com.example.plazapalm.views.privacypolicy.PrivacyPolicyVM", ((Provider) privacyPolicyVMProvider)).put("com.example.plazapalm.premiumviews.qrcodegenerate.QRCodeGenerateVM", ((Provider) qRCodeGenerateVMProvider)).put("com.example.plazapalm.views.myprofile.qrcodescanner.QrCodeScannerVM", ((Provider) qrCodeScannerVMProvider)).put("com.example.plazapalm.views.advancesettings.questionaries.QuestionariesVM", ((Provider) questionariesVMProvider)).put("com.example.plazapalm.views.reportselection.ReportChooseVM", ((Provider) reportChooseVMProvider)).put("com.example.plazapalm.views.report.ReportVM", ((Provider) reportVMProvider)).put("com.example.plazapalm.views.selectcategory.SelectCategoryViewModel", ((Provider) selectCategoryViewModelProvider)).put("com.example.plazapalm.views.settings.SettingsVM", ((Provider) settingsVMProvider)).put("com.example.plazapalm.views.advancesettings.pictures.ShowPictureVideoVM", ((Provider) showPictureVideoVMProvider)).put("com.example.plazapalm.views.signup.SignupVM", ((Provider) signupVMProvider)).put("com.example.plazapalm.views.splash.SplashVM", ((Provider) splashVMProvider)).put("com.example.plazapalm.views.termsuse.TermsUseVM", ((Provider) termsUseVMProvider)).put("com.example.plazapalm.views.confirmbookthankyou.ThankYouVM", ((Provider) thankYouVMProvider)).put("com.example.plazapalm.views.updatemail.UpdateEmailVM", ((Provider) updateEmailVMProvider)).put("com.example.plazapalm.views.upgrade.UpgradeVM", ((Provider) upgradeVMProvider)).put("com.example.plazapalm.views.verifymail.VerifyEmailVM", ((Provider) verifyEmailVMProvider)).put("com.example.plazapalm.views.viewprofile.ViewProfileVM", ((Provider) viewProfileVMProvider)).put("com.example.plazapalm.views.welcome.WelcomeVM", ((Provider) welcomeVMProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.plazapalm.views.catergorylist.addcities.AddCitiesVM 
          return (T) new AddCitiesVM(viewModelCImpl.preferenceFile());

          case 1: // com.example.plazapalm.views.addphotos.AddPhotosVM 
          return (T) new AddPhotosVM(singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile(), viewModelCImpl.repository());

          case 2: // com.example.plazapalm.views.advancesettings.editlook.AdvanceEditLookVM 
          return (T) new AdvanceEditLookVM(singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile(), viewModelCImpl.repository());

          case 3: // com.example.plazapalm.views.advancesettings.map.AdvanceMapVM 
          return (T) new AdvanceMapVM(viewModelCImpl.repository(), viewModelCImpl.preferenceFile(), singletonCImpl.dataStoreUtil());

          case 4: // com.example.plazapalm.views.advancesettings.gallery.AdvanceSettingGalleryVM 
          return (T) new AdvanceSettingGalleryVM();

          case 5: // com.example.plazapalm.views.advancesettings.editmap.AdvanceSettingMapVM 
          return (T) new AdvanceSettingMapVM();

          case 6: // com.example.plazapalm.views.advancesettings.AdvanceSettingVM 
          return (T) new AdvanceSettingVM();

          case 7: // com.example.plazapalm.views.bookingdetails.BookingDetailsVM 
          return (T) new BookingDetailsVM(viewModelCImpl.repository(), singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile());

          case 8: // com.example.plazapalm.views.myprofile.calendar.CalendarVM 
          return (T) new CalendarVM(viewModelCImpl.repository(), viewModelCImpl.preferenceFile(), singletonCImpl.dataStoreUtil());

          case 9: // com.example.plazapalm.views.catergorylist.CategoriesListVM 
          return (T) new CategoriesListVM(singletonCImpl.dataStoreUtil(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile(), viewModelCImpl.repository());

          case 10: // com.example.plazapalm.views.changepass.ChangePassVM 
          return (T) new ChangePassVM(viewModelCImpl.repository(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile(), singletonCImpl.dataStoreUtil());

          case 11: // com.example.plazapalm.views.chat.ChatVM 
          return (T) new ChatVM(viewModelCImpl.repository(), singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile());

          case 12: // com.example.plazapalm.views.confirmbookthankyou.ConfirmBookingVM 
          return (T) new ConfirmBookingVM(viewModelCImpl.repository(), viewModelCImpl.preferenceFile(), singletonCImpl.dataStoreUtil());

          case 13: // com.example.plazapalm.views.contactus.ContactUsVM 
          return (T) new ContactUsVM(viewModelCImpl.repository(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile());

          case 14: // com.example.plazapalm.views.dashboard.DashBoardVM 
          return (T) new DashBoardVM(viewModelCImpl.repository(), singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile());

          case 15: // com.example.plazapalm.views.advancesettings.editfontpage.EditFrontPageVM 
          return (T) new EditFrontPageVM();

          case 16: // com.example.plazapalm.views.editprofile.EditProfileVM 
          return (T) new EditProfileVM(singletonCImpl.dataStoreUtil(), viewModelCImpl.repository(), viewModelCImpl.preferenceFile());

          case 17: // com.example.plazapalm.views.verifyemailsecond.EmailVerifyVM 
          return (T) new EmailVerifyVM(viewModelCImpl.repository(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile());

          case 18: // com.example.plazapalm.views.favourites.favdetails.FavDetailsVM 
          return (T) new FavDetailsVM(singletonCImpl.dataStoreUtil(), viewModelCImpl.repository(), viewModelCImpl.preferenceFile());

          case 19: // com.example.plazapalm.views.favourites.FavouritesVM 
          return (T) new FavouritesVM(viewModelCImpl.repository(), viewModelCImpl.preferenceFile(), singletonCImpl.dataStoreUtil());

          case 20: // com.example.plazapalm.views.filter.FilterFragmentVM 
          return (T) new FilterFragmentVM(singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile());

          case 21: // com.example.plazapalm.views.forgotpassword.ForgotPassVM 
          return (T) new ForgotPassVM(viewModelCImpl.repository(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule));

          case 22: // com.example.plazapalm.views.login.LoginVM 
          return (T) new LoginVM(viewModelCImpl.repository(), singletonCImpl.dataStoreUtil(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile());

          case 23: // com.example.plazapalm.views.MainVM 
          return (T) new MainVM();

          case 24: // com.example.plazapalm.views.messageslist.MessagesVM 
          return (T) new MessagesVM();

          case 25: // com.example.plazapalm.views.myprofile.MyProfileVM 
          return (T) new MyProfileVM(singletonCImpl.dataStoreUtil(), viewModelCImpl.repository(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile());

          case 26: // com.example.plazapalm.views.selectcategory.opencategeroy.OpenCategeroyViewModel 
          return (T) new OpenCategeroyViewModel(singletonCImpl.dataStoreUtil(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile(), viewModelCImpl.repository());

          case 27: // com.example.plazapalm.views.advancesettings.pictures.PicturesVM 
          return (T) new PicturesVM();

          case 28: // com.example.plazapalm.views.myprofile.postprofile.PostProfileVM 
          return (T) new PostProfileVM(viewModelCImpl.repository(), singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile());

          case 29: // com.example.plazapalm.premiumviews.PremiumEditProVM 
          return (T) new PremiumEditProVM();

          case 30: // com.example.plazapalm.views.privacypolicy.PrivacyPolicyVM 
          return (T) new PrivacyPolicyVM();

          case 31: // com.example.plazapalm.premiumviews.qrcodegenerate.QRCodeGenerateVM 
          return (T) new QRCodeGenerateVM();

          case 32: // com.example.plazapalm.views.myprofile.qrcodescanner.QrCodeScannerVM 
          return (T) new QrCodeScannerVM();

          case 33: // com.example.plazapalm.views.advancesettings.questionaries.QuestionariesVM 
          return (T) new QuestionariesVM(singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile(), viewModelCImpl.repository());

          case 34: // com.example.plazapalm.views.reportselection.ReportChooseVM 
          return (T) new ReportChooseVM();

          case 35: // com.example.plazapalm.views.report.ReportVM 
          return (T) new ReportVM(singletonCImpl.dataStoreUtil(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.repository(), viewModelCImpl.preferenceFile());

          case 36: // com.example.plazapalm.views.selectcategory.SelectCategoryViewModel 
          return (T) new SelectCategoryViewModel(singletonCImpl.dataStoreUtil(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile(), viewModelCImpl.repository());

          case 37: // com.example.plazapalm.views.settings.SettingsVM 
          return (T) new SettingsVM(singletonCImpl.dataStoreUtil(), viewModelCImpl.repository(), viewModelCImpl.preferenceFile());

          case 38: // com.example.plazapalm.views.advancesettings.pictures.ShowPictureVideoVM 
          return (T) new ShowPictureVideoVM();

          case 39: // com.example.plazapalm.views.signup.SignupVM 
          return (T) new SignupVM(viewModelCImpl.repository(), singletonCImpl.dataStoreUtil());

          case 40: // com.example.plazapalm.views.splash.SplashVM 
          return (T) new SplashVM(viewModelCImpl.repository(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile());

          case 41: // com.example.plazapalm.views.termsuse.TermsUseVM 
          return (T) new TermsUseVM();

          case 42: // com.example.plazapalm.views.confirmbookthankyou.ThankYouVM 
          return (T) new ThankYouVM();

          case 43: // com.example.plazapalm.views.updatemail.UpdateEmailVM 
          return (T) new UpdateEmailVM(viewModelCImpl.repository(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), singletonCImpl.dataStoreUtil(), viewModelCImpl.preferenceFile());

          case 44: // com.example.plazapalm.views.upgrade.UpgradeVM 
          return (T) new UpgradeVM();

          case 45: // com.example.plazapalm.views.verifymail.VerifyEmailVM 
          return (T) new VerifyEmailVM(viewModelCImpl.repository(), NetworkModule_CacheUtilFactory.cacheUtil(singletonCImpl.networkModule), viewModelCImpl.preferenceFile());

          case 46: // com.example.plazapalm.views.viewprofile.ViewProfileVM 
          return (T) new ViewProfileVM();

          case 47: // com.example.plazapalm.views.welcome.WelcomeVM 
          return (T) new WelcomeVM();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends AppController_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends AppController_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends AppController_HiltComponents.SingletonC {
    private final DataStoreModule dataStoreModule;

    private final ApplicationContextModule applicationContextModule;

    private final NetworkModule networkModule;

    private final PrefModule prefModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<DataStore<Preferences>> getDataStoreProvider;

    private Provider<CoroutineExceptionHandler> exceptionHandlerProvider;

    private Provider<SharedPreferences> getPrefProvider;

    private Provider<SharedPreferences.Editor> getEditorProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<GsonConverterFactory> gsonConverterFactoryProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<RetrofitApi> provideApiServiceProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam,
        DataStoreModule dataStoreModuleParam, NetworkModule networkModuleParam,
        PrefModule prefModuleParam) {
      this.dataStoreModule = dataStoreModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      this.networkModule = networkModuleParam;
      this.prefModule = prefModuleParam;
      initialize(applicationContextModuleParam, dataStoreModuleParam, networkModuleParam, prefModuleParam);

    }

    private DataStoreUtil dataStoreUtil() {
      return new DataStoreUtil(getDataStoreProvider.get(), exceptionHandlerProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam,
        final DataStoreModule dataStoreModuleParam, final NetworkModule networkModuleParam,
        final PrefModule prefModuleParam) {
      this.getDataStoreProvider = DoubleCheck.provider(new SwitchingProvider<DataStore<Preferences>>(singletonCImpl, 0));
      this.exceptionHandlerProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineExceptionHandler>(singletonCImpl, 1));
      this.getPrefProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonCImpl, 3));
      this.getEditorProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences.Editor>(singletonCImpl, 2));
      this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 6));
      this.gsonConverterFactoryProvider = DoubleCheck.provider(new SwitchingProvider<GsonConverterFactory>(singletonCImpl, 7));
      this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 5));
      this.provideApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<RetrofitApi>(singletonCImpl, 4));
    }

    @Override
    public void injectAppController(AppController arg0) {
      injectAppController2(arg0);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private AppController injectAppController2(AppController instance) {
      AppController_MembersInjector.injectDataStoreUtil(instance, dataStoreUtil());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // androidx.datastore.core.DataStore<androidx.datastore.preferences.core.Preferences> 
          return (T) DataStoreModule_GetDataStoreFactory.getDataStore(singletonCImpl.dataStoreModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 1: // kotlinx.coroutines.CoroutineExceptionHandler 
          return (T) NetworkModule_ExceptionHandlerFactory.exceptionHandler(singletonCImpl.networkModule);

          case 2: // android.content.SharedPreferences.Editor 
          return (T) PrefModule_GetEditorFactory.getEditor(singletonCImpl.prefModule, singletonCImpl.getPrefProvider.get());

          case 3: // android.content.SharedPreferences 
          return (T) PrefModule_GetPrefFactory.getPref(singletonCImpl.prefModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 4: // com.example.plazapalm.networkcalls.RetrofitApi 
          return (T) NetworkModule_ProvideApiServiceFactory.provideApiService(singletonCImpl.networkModule, singletonCImpl.provideRetrofitProvider.get());

          case 5: // retrofit2.Retrofit 
          return (T) NetworkModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.networkModule, singletonCImpl.provideOkHttpClientProvider.get(), singletonCImpl.gsonConverterFactoryProvider.get(), NetworkModule_ProvideBaseUrlFactory.provideBaseUrl(singletonCImpl.networkModule));

          case 6: // okhttp3.OkHttpClient 
          return (T) NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(singletonCImpl.networkModule, NetworkModule_TokenAuthenticatorFactory.tokenAuthenticator(singletonCImpl.networkModule));

          case 7: // retrofit2.converter.gson.GsonConverterFactory 
          return (T) NetworkModule_GsonConverterFactoryFactory.gsonConverterFactory(singletonCImpl.networkModule);

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
