// Generated by Dagger (https://dagger.dev).
package com.example.plazapalm.datastore;

import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineExceptionHandler;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataStoreUtil_Factory implements Factory<DataStoreUtil> {
  private final Provider<DataStore<Preferences>> dataStoreProvider;

  private final Provider<CoroutineExceptionHandler> coRoutineExceptionHandlerProvider;

  public DataStoreUtil_Factory(Provider<DataStore<Preferences>> dataStoreProvider,
      Provider<CoroutineExceptionHandler> coRoutineExceptionHandlerProvider) {
    this.dataStoreProvider = dataStoreProvider;
    this.coRoutineExceptionHandlerProvider = coRoutineExceptionHandlerProvider;
  }

  @Override
  public DataStoreUtil get() {
    return newInstance(dataStoreProvider.get(), coRoutineExceptionHandlerProvider.get());
  }

  public static DataStoreUtil_Factory create(Provider<DataStore<Preferences>> dataStoreProvider,
      Provider<CoroutineExceptionHandler> coRoutineExceptionHandlerProvider) {
    return new DataStoreUtil_Factory(dataStoreProvider, coRoutineExceptionHandlerProvider);
  }

  public static DataStoreUtil newInstance(DataStore<Preferences> dataStore,
      CoroutineExceptionHandler coRoutineExceptionHandler) {
    return new DataStoreUtil(dataStore, coRoutineExceptionHandler);
  }
}
