// Generated by Dagger (https://dagger.dev).
package com.example.plazapalm.views.report;

import com.example.plazapalm.datastore.DataStoreUtil;
import com.example.plazapalm.networkcalls.CacheUtil;
import com.example.plazapalm.networkcalls.Repository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ReportVM_Factory implements Factory<ReportVM> {
  private final Provider<DataStoreUtil> dataStoreUtilProvider;

  private final Provider<CacheUtil> cacheUtilProvider;

  private final Provider<Repository> repositoryProvider;

  public ReportVM_Factory(Provider<DataStoreUtil> dataStoreUtilProvider,
      Provider<CacheUtil> cacheUtilProvider, Provider<Repository> repositoryProvider) {
    this.dataStoreUtilProvider = dataStoreUtilProvider;
    this.cacheUtilProvider = cacheUtilProvider;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public ReportVM get() {
    return newInstance(dataStoreUtilProvider.get(), cacheUtilProvider.get(), repositoryProvider.get());
  }

  public static ReportVM_Factory create(Provider<DataStoreUtil> dataStoreUtilProvider,
      Provider<CacheUtil> cacheUtilProvider, Provider<Repository> repositoryProvider) {
    return new ReportVM_Factory(dataStoreUtilProvider, cacheUtilProvider, repositoryProvider);
  }

  public static ReportVM newInstance(DataStoreUtil dataStoreUtil, CacheUtil cacheUtil,
      Repository repository) {
    return new ReportVM(dataStoreUtil, cacheUtil, repository);
  }
}
