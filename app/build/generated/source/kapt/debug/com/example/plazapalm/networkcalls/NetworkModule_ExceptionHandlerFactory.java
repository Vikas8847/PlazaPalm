// Generated by Dagger (https://dagger.dev).
package com.example.plazapalm.networkcalls;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import kotlinx.coroutines.CoroutineExceptionHandler;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ExceptionHandlerFactory implements Factory<CoroutineExceptionHandler> {
  private final NetworkModule module;

  public NetworkModule_ExceptionHandlerFactory(NetworkModule module) {
    this.module = module;
  }

  @Override
  public CoroutineExceptionHandler get() {
    return exceptionHandler(module);
  }

  public static NetworkModule_ExceptionHandlerFactory create(NetworkModule module) {
    return new NetworkModule_ExceptionHandlerFactory(module);
  }

  public static CoroutineExceptionHandler exceptionHandler(NetworkModule instance) {
    return Preconditions.checkNotNullFromProvides(instance.exceptionHandler());
  }
}
