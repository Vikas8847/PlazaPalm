// Generated by Dagger (https://dagger.dev).
package com.example.plazapalm.networkcalls;

import com.example.plazapalm.datastore.DataStoreUtil;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Repository_Factory implements Factory<Repository> {
  private final Provider<RetrofitApi> retrofitApiProvider;

  private final Provider<CacheUtil> cacheUtilProvider;

  private final Provider<DataStoreUtil> dataStoreUtilProvider;

  public Repository_Factory(Provider<RetrofitApi> retrofitApiProvider,
      Provider<CacheUtil> cacheUtilProvider, Provider<DataStoreUtil> dataStoreUtilProvider) {
    this.retrofitApiProvider = retrofitApiProvider;
    this.cacheUtilProvider = cacheUtilProvider;
    this.dataStoreUtilProvider = dataStoreUtilProvider;
  }

  @Override
  public Repository get() {
    return newInstance(retrofitApiProvider.get(), cacheUtilProvider.get(), dataStoreUtilProvider.get());
  }

  public static Repository_Factory create(Provider<RetrofitApi> retrofitApiProvider,
      Provider<CacheUtil> cacheUtilProvider, Provider<DataStoreUtil> dataStoreUtilProvider) {
    return new Repository_Factory(retrofitApiProvider, cacheUtilProvider, dataStoreUtilProvider);
  }

  public static Repository newInstance(RetrofitApi retrofitApi, CacheUtil cacheUtil,
      DataStoreUtil dataStoreUtil) {
    return new Repository(retrofitApi, cacheUtil, dataStoreUtil);
  }
}
