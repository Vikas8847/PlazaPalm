// Generated by Dagger (https://dagger.dev).
package com.example.plazapalm.networkcalls;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final NetworkModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<GsonConverterFactory> gsonConverterFactoryProvider;

  private final Provider<String> bASE_URLProvider;

  public NetworkModule_ProvideRetrofitFactory(NetworkModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<String> bASE_URLProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
    this.gsonConverterFactoryProvider = gsonConverterFactoryProvider;
    this.bASE_URLProvider = bASE_URLProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, okHttpClientProvider.get(), gsonConverterFactoryProvider.get(), bASE_URLProvider.get());
  }

  public static NetworkModule_ProvideRetrofitFactory create(NetworkModule module,
      Provider<OkHttpClient> okHttpClientProvider,
      Provider<GsonConverterFactory> gsonConverterFactoryProvider,
      Provider<String> bASE_URLProvider) {
    return new NetworkModule_ProvideRetrofitFactory(module, okHttpClientProvider, gsonConverterFactoryProvider, bASE_URLProvider);
  }

  public static Retrofit provideRetrofit(NetworkModule instance, OkHttpClient okHttpClient,
      GsonConverterFactory gsonConverterFactory, String BASE_URL) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(okHttpClient, gsonConverterFactory, BASE_URL));
  }
}
