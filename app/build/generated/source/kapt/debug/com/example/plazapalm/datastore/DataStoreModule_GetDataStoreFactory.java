// Generated by Dagger (https://dagger.dev).
package com.example.plazapalm.datastore;

import android.content.Context;
import androidx.datastore.core.DataStore;
import androidx.datastore.preferences.core.Preferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataStoreModule_GetDataStoreFactory implements Factory<DataStore<Preferences>> {
  private final DataStoreModule module;

  private final Provider<Context> contextProvider;

  public DataStoreModule_GetDataStoreFactory(DataStoreModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public DataStore<Preferences> get() {
    return getDataStore(module, contextProvider.get());
  }

  public static DataStoreModule_GetDataStoreFactory create(DataStoreModule module,
      Provider<Context> contextProvider) {
    return new DataStoreModule_GetDataStoreFactory(module, contextProvider);
  }

  public static DataStore<Preferences> getDataStore(DataStoreModule instance, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.getDataStore(context));
  }
}
