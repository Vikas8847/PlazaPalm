// Generated by Dagger (https://dagger.dev).
package com.example.plazapalm.networkcalls;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<TokenAuthenticator> tokenAuthenticatorProvider;

  public NetworkModule_ProvideOkHttpClientFactory(NetworkModule module,
      Provider<TokenAuthenticator> tokenAuthenticatorProvider) {
    this.module = module;
    this.tokenAuthenticatorProvider = tokenAuthenticatorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, tokenAuthenticatorProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(NetworkModule module,
      Provider<TokenAuthenticator> tokenAuthenticatorProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(module, tokenAuthenticatorProvider);
  }

  public static OkHttpClient provideOkHttpClient(NetworkModule instance,
      TokenAuthenticator tokenAuthenticator) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(tokenAuthenticator));
  }
}
